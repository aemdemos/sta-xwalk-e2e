name: Daily XWalk E2E Test

on:
  schedule:
    - cron: '3 7 * * *'  # every day at 7:03 am UTC
    - cron: '3 8 * * *'  # every day at 8:03 am UTC
  workflow_dispatch:
    inputs:
      test_context:
        description: 'Which test to run (optional - will use time-based logic if not specified)'
        required: false
        type: choice
        options:
          - boilerplate
          - wknd

permissions:
  issues: write
  contents: read

jobs:
  create-issue:
    runs-on: ubuntu-latest

    steps:
      - name: Determine test context
        id: context
        run: |
          # Check if manual trigger provided a test context
          if [ -n "${{ github.event.inputs.test_context }}" ]; then
            TEST_CONTEXT="${{ github.event.inputs.test_context }}"
            echo "Manual trigger with specified test context: $TEST_CONTEXT"
          else
            # Use time-based logic (for scheduled triggers or manual triggers without input)
            CURRENT_HOUR=$(date -u +"%H")
            echo "Using time-based logic - Current UTC hour: $CURRENT_HOUR"
            
            if [ "$CURRENT_HOUR" = "07" ]; then
              TEST_CONTEXT="boilerplate"
            elif [ "$CURRENT_HOUR" = "08" ]; then
              TEST_CONTEXT="wknd"
            else
              echo "::error::Unexpected time ($CURRENT_HOUR UTC) - scheduled runs only supported at 07 and 08 UTC"
              exit 1
            fi
          fi
          
          # Set outputs based on test context
          if [ "$TEST_CONTEXT" = "boilerplate" ]; then
            echo "Running XWalk E2E Boilerplate test"
            echo "test_type=XWalk-boilerplate" >> $GITHUB_OUTPUT
            echo "site_url=https://main--aem-boilerplate--adobe.aem.page" >> $GITHUB_OUTPUT
            echo "site_name=XWalk-boilerplate" >> $GITHUB_OUTPUT
          else
            echo "Running XWalk WKND E2E test"
            echo "test_type=wknd" >> $GITHUB_OUTPUT
            echo "site_url=https://wknd.site" >> $GITHUB_OUTPUT
            echo "site_name=WKND" >> $GITHUB_OUTPUT
          fi
      - name: Create GitHub Issue
        id: create_issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const today = new Date().toISOString().split('T')[0];
            const testType = process.env.TEST_TYPE;
            const siteName = process.env.SITE_NAME;
            const siteUrl = process.env.SITE_URL;

            const issueTitle = `AEMY XWalk Catalyze ${siteName} - ${today}`;
            const issueBody = `Catalyze ${siteUrl}/.`;

            const response = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: issueBody,
              labels: ['aemy-go', 'aemy-help', 'aemy-merge']
            });
            core.setOutput('issue_url', response.data.html_url);
            core.setOutput('issue_title', response.data.title);
            core.setOutput('issue_number', response.data.number);

            console.log(`Created issue: ${response.data.html_url}`);
        env:
          TEST_TYPE: ${{ steps.context.outputs.test_type }}
          SITE_NAME: ${{ steps.context.outputs.site_name }}
          SITE_URL: ${{ steps.context.outputs.site_url }}

      - name: Post Slack message for new issue
        id: slack_notify
        continue-on-error: true
        uses: slackapi/slack-github-action@v1.25.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          payload: |
            {
              "text": "*E2E Crosswalk ${{ steps.context.outputs.site_name }} Test Started* :rocket:\nIssue created: <${{ steps.create_issue.outputs.issue_url }}|${{ steps.create_issue.outputs.issue_title }}>"
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      - name: Comment Slack thread timestamp on issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = Number(process.env.ISSUE_NUMBER);
            const slack_outcome = process.env.SLACK_OUTCOME;
            const thread_ts = process.env.SLACK_THREAD_TS;
            const channel_id = process.env.SLACK_CHANNEL_ID;
            
            let comment_body;
            if (slack_outcome === 'success') {
              // Format thread_ts for Slack URL (remove decimal point, add 'p' prefix)
              const formatted_ts = 'p' + thread_ts.replace('.', '');
              const slack_url = `https://adobe.enterprise.slack.com/archives/${channel_id}/${formatted_ts}`;
              
              comment_body = `‚úÖ Slack notification posted successfully to channel ${channel_id}\n\nüîó [View Slack message](${slack_url})`;
            } else {
              comment_body = `‚ö†Ô∏è Slack notification failed - no thread timestamp available`;
            }
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number,
              body: comment_body
            });
        env:
          ISSUE_NUMBER: ${{ steps.create_issue.outputs.issue_number }}
          SLACK_THREAD_TS: ${{ steps.slack_notify.outputs.ts }}
          SLACK_OUTCOME: ${{ steps.slack_notify.outcome }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
